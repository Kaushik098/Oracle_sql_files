-----------------
/*
DDL - Data Definition Language
--will create objects like
Table	- Basic unit of storage; composed of rows
View	- Logically represents subsets of data from one or more tables
Sequence	- Generates numeric values
Index	- Improves the performance of some queries
Synonym	- Gives alternative name to an object
*/

INDEX:


DDL - Data Definition Language
Index	- Improves the performance of some queries (WHERE condition)

----------------------
search for word "equation"
page 1 to page 1000

occurrence 
page 100
page 200
page 503
page 999
page 1000

Book does not have index page
time taken - 30 mins

This is called FULL BOOK SCAN
--------------------------------
Now book has index page

Index page
---------
equation
 page 100
 page 200
 page 503
 page 999
 page 1000
 
Now time taken will be 1 min

This is called INDEX SCAN
-----------------------------------------------------------------------------



Creating a table for learning index

employee_id   first_name    state   city        mobile_no   email
-------------------------------------------------------------------------
101           A             TN      Chennai     11111111    a@xyz.com
102           B             KA      Bangalore   22222222    b@xyz.com
103           C             KA      Mysore      33333333    c@xyz.com
104           D             MH      Mumbai      44444444    d@xyz.com
105           E             TN      Coimbatore  55555555    e@xyz.com
106           F             TN      Chennai     66666666    f@xyz.com
107           G             KL      Cochin      77777777    g@xyz.com


create table my_emp_index (employee_id number primary key, first_name varchar2(100), state varchar2(100), 
                           city varchar2(100), mobile_no number , email varchar2(100));

insert into my_emp_index  
select 101, 'A' , 'TN' ,      'Chennai' ,     11111111  ,  'a@xyz.com' from DUAL
union all 
select 102,         'B',             'KA',      'Bangalore',   22222222,  'b@xyz.com' from DUAL
union all
select 103,           'C',             'KA',      'Mysore',      33333333,    'c@xyz.com' from dual
union all
select 104,           'D',             'MH',      'Mumbai',      44444444,    'd@xyz.com' from dual
union all
select 105,           'E',             'TN',      'Coimbatore',  55555555,    'e@xyz.com' from dual
union all
select 106,           'F',             'TN',      'Chennai',     66666666,    'f@xyz.com' from dual
union all
select 107,           'G',             'KL',      'Cochin',      77777777,    'g@xyz.com' from dual;

select * from my_emp_index;
commit;

- FULL TABLE SCAN (O/P - 3 rows)
select * from my_emp_index where state = 'TN';

--------------------------------------------------------------------------

Explain plan : is used to see the report generated by Oracle

> We need not run the query to see the plan, we can just run the command explain plan
> The important information to see in the plan is 
     Full Table Scan VS Index Scan 
     Rows, Cost, Time 


Select your query and Right Click and select Explain plan in SQL Developer
OR
Use this shortcut
explain plan  - Shortcut F10


--Another way to explain plan
Step 1:
EXPLAIN PLAN FOR select * from my_emp_index where state = 'TN';
Step 2:
SELECT PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY());
Output:
Plan hash value: 1331488862
 
----------------------------------------------------------------------------------
| Id  | Operation         | Name         | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |              |     3 |   702 |     3   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS FULL| MY_EMP_INDEX |     3 |   702 |     3   (0)| 00:00:01 |
----------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter("STATE"='TN')
 
Note
-----
   - dynamic sampling used for this statement (level=2)


---------------------------------------------------------------------------------

converting the above plan for better performance - We are going to create an Index on State column

create index idx_my_emp_index_state on my_emp_index(state);

--INDEX SCAN
Oracle uses rowID to uniqely identify each and every row in a table.
This rowID is used to create the index page by Oracle 

select rowID, e.* from my_emp_index e;


INDEX PAGE
STATE
-----
TN   -  AAAFvGAAEAAAAqzAAB, AAAFvGAAEAAAAqzAAF, AAAFvGAAEAAAAqzAAG
KA   -  AAAFvGAAEAAAAqzAAC, AAAFvGAAEAAAAqzAAD
MH   -  AAAFvGAAEAAAAqzAAE
KL   -  AAAFvGAAEAAAAqzAAH

Step 1:
EXPLAIN PLAN FOR select * from my_emp_index where state = 'TN';
Step 2:
SELECT PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY());

Plan hash value: 2503725207
 
------------------------------------------------------------------------------------------------------
| Id  | Operation                   | Name                   | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                        |     3 |   702 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID| MY_EMP_INDEX           |     3 |   702 |     2   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN          | IDX_MY_EMP_INDEX_STATE |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------------


--------------------------


To drop index

drop index index_name;

drop index idx_my_emp_index_state;


-- If index is dropped the select query will again go for Full table scan
 
-------------------------------------------------------------------------------


Data Dictionary 

select * from user_objects where OBJECT_NAME = 'IDX_MY_EMP_INDEX_CITY';

select * from user_indexes where table_name = 'MY_EMP_INDEX';

select * from USER_IND_COLUMNS where table_name = 'MY_EMP_INDEX';


------------------------------------------------------------------------------
Creating index for coulumn CITY

select * from my_emp_index;

select * from my_emp_index where city = 'Chennai';

-- Explain plan without index

Step 1:
EXPLAIN PLAN FOR select * from my_emp_index where city = 'Chennai';
Step 2:
SELECT PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY());


Plan hash value: 1331488862
 
----------------------------------------------------------------------------------
| Id  | Operation         | Name         | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |              |     2 |   468 |     3   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS FULL| MY_EMP_INDEX |     2 |   468 |     3   (0)| 00:00:01 |
----------------------------------------------------------------------------------


-Explain plan with  creating index for CITY column 

 create index idx_my_emp_index_city on my_emp_index(city); 

 
Step 1:
EXPLAIN PLAN FOR select * from my_emp_index where city = 'Chennai';
Step 2:
SELECT PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY());

Plan hash value: 2014079207
 
-----------------------------------------------------------------------------------------------------
| Id  | Operation                   | Name                  | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                       |     2 |   468 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID| MY_EMP_INDEX          |     2 |   468 |     2   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN          | IDX_MY_EMP_INDEX_CITY |     1 |       |     1   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------------

-- SELECT STATEMENT - is the final scan report

Step 1:
EXPLAIN PLAN FOR select * from employees where salary > 5000;
Step 2:
SELECT PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY());

Plan hash value: 1445457117
 
-------------------------------------------------------------------------------
| Id  | Operation         | Name      | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |           |    93 |  6417 |     3   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS FULL| EMPLOYEES |    93 |  6417 |     3   (0)| 00:00:01 |
-------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter("SALARY">5000)

-------------------------------------------------------------------------------------------

select * from my_emp_index;

select * from user_constraints where table_name = 'MY_EMP_INDEX';

select * from user_cons_columns where table_name = 'MY_EMP_INDEX';

select * from my_emp_index where employee_id = 101;

> Oracle automatically created unique index for primary key columns and unique columns

> Whenever you create a primary key constraint or unique constraint on a column, oracle automatically creates unique index with 
the same name as the constraint name 

> Since primary key and unique values are unique (employee_id, mobile, email), so whenever we run a query like below 
select * from my_emp_index where employee_id = 101;

select * from my_emp_index where mobile_no = 11111111;

Oracle need not go for full table scan for above queries since it is going to fetch only one row always 

Hence, automatically index is created when we create a primary key or unique constraint


create table my_table_index (employee_id number primary key, mobile_no number unique);


select * from user_constraints where table_name = 'MY_TABLE_INDEX';
select * from user_cons_columns where table_name = 'MY_TABLE_INDEX';

select * from user_indexes where table_name = 'MY_TABLE_INDEX';
select * from user_ind_columns where table_name = 'MY_TABLE_INDEX';

explain plan for select * from my_table_index where employee_id = 100;
select PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY());


Plan hash value: 4123645624
 
----------------------------------------------------------------------------------------------
| Id  | Operation                   | Name           | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                |     1 |    26 |     1   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID| MY_TABLE_INDEX |     1 |    26 |     1   (0)| 00:00:01 |
|*  2 |   INDEX UNIQUE SCAN         | SYS_C007631    |     1 |       |     1   (0)| 00:00:01 |
----------------------------------------------------------------------------------------------



explain plan for select * from my_table_index where mobile_no = 100;
select PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY());

Plan hash value: 255159605
 
----------------------------------------------------------------------------------------------
| Id  | Operation                   | Name           | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                |     1 |    26 |     1   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID| MY_TABLE_INDEX |     1 |    26 |     1   (0)| 00:00:01 |
|*  2 |   INDEX UNIQUE SCAN         | SYS_C007632    |     1 |       |     1   (0)| 00:00:01 |
----------------------------------------------------------------------------------------------



